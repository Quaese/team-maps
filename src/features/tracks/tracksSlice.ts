import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { guidGenerator } from '../../app/tools';
import { original } from 'immer';

export interface Track {
  title?: string | null;
  descr?: string | null;
  id?: string;
  user_id?: number;
  gpx?: 'TBD'
}

export interface TracksState {
  list: Track[];
}

const initialState: TracksState = {
  list: []
};

export const tracksSlice = createSlice({
  name: "tracks",
  initialState,

  reducers: {
    updateTrack: (state, action) => {
      let index:any;

      if (state.list && state.list.length) {
        let track: any = state.list.filter((track, idx) => {
          let ret = false;

          if (track.id === action.payload.id) {
            index = idx;
            ret = true;
          }

          return ret;
        });

        if (index !== undefined)
          track = original(track[0]);

          state.list[index] = {
            ...track,
            title: action.payload.track.title || track.title,
            descr: action.payload.track.descr || track.descr,
            gpx: action.payload.track.gpx || track.gpx
          };
      }
    },
    addTrack: (state, action:PayloadAction<Track>) => {
      const guid: string = guidGenerator();
      const track = {
        id: guid,
        user_id: action.payload.user_id || 1,
        title: action.payload.title || "",
        descr: action.payload.descr || "",
        gpx: action.payload.gpx || 'TBD'
      };

      return {
        ...state,
        list: [
          ...state.list,
          track
        ]
      }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    // builder
    //   .addCase(fetchUsersAsync.pending, (state) => {
    //     // state.status = 'loading';
    //     console.log('status: ', 'loading')
    //   })
    //   .addCase(fetchUsersAsync.fulfilled, (state, action) => {
    //     // state.status = 'idle';
    //     console.log('status: ', 'idle', action.payload)
    //     // state.value += action.payload;
    //   })
    //   .addCase(fetchUsersAsync.rejected, (state) => {
    //     // state.status = 'failed';
    //     console.log('status: ', 'failed')
    //   });
  },
});

// SELECTORS
// get tracks
export const selectTracksList = (state: RootState) => state.tracks.list;

export const { addTrack, updateTrack } = tracksSlice.actions;

export default tracksSlice.reducer;