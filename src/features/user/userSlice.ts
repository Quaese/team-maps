import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
// import { guidGenerator } from '../../app/tools';
import { fetchUsers } from './userAPI';

export interface User {
  name?: string | null;
  username?: string | null;
  email?: string | null;
  id?: number;
}

export interface UserState {
  users: User[];
  loading: boolean;
  hasErrors: boolean;
}

const initialState: UserState = {
  users: [],
  loading: false,
  hasErrors: false
};

// Async actions
export const fetchUsersAsync = createAsyncThunk(
  'users/fetchUsers',
  async () => {
    const response = await fetchUsers();
    const users: User[] = await response.json();

    // the value we return becomes the `fulfilled` action payload
    return users;
  }
);

export const userSlice = createSlice({
  name: "users",
  initialState,

  reducers: {
    addUser: (state, action: PayloadAction<User>) => {
      const id = state.users.length + 1;
      console.log(id, action.payload);
      return {
        ...state,
        users: [
          ...state.users,
          {...action.payload, id}
        ]
      };
      // let index:any;

      // if (state.users && state.users.length) {
      //   let track: any = state.users.filter((track, idx) => {
      //     let ret = false;

      //     if (track.id === action.payload.id) {
      //       index = idx;
      //       ret = true;
      //     }

      //     return ret;
      //   });

      //   if (index !== undefined)
      //     track = original(track[0]);

      //     state.users[index] = {
      //       ...track,
      //       title: action.payload.track.title || track.title,
      //       descr: action.payload.track.descr || track.descr,
      //       gpx: action.payload.track.gpx || track.gpx
      //     };
      // }
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchUsersAsync.pending, (state) => {
        state.loading = true;
        state.hasErrors = false;
        // console.log('status: ', 'loading')
      })
      .addCase(fetchUsersAsync.fulfilled, (state, action) => {
        state.loading = false;
        state.hasErrors = false;
        state.users = action.payload;
        // console.log('status: ', 'idle', action.payload)
      })
      .addCase(fetchUsersAsync.rejected, (state) => {
        state.loading = false;
        state.hasErrors = true;
        // console.log('status: ', 'failed')
      });
  },
});

// SELECTORS
// users selctor
export const selectUsers = (state: RootState) => state.users;

// actions + reducer
const { actions, reducer } = userSlice;

// export actions and reducer
export const { addUser } = actions;
export default reducer;